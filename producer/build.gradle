buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
        classpath("au.com.dius:pact-jvm-provider-gradle:4.0.3")
    }
}

apply plugin: 'au.com.dius.pact'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'blog.automationhacks.contracttesting'
version '1.0-SNAPSHOT'

bootJar {
    archiveBaseName = 'producer'
    archiveVersion = '1.0-SNAPSHOT'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }

    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

springBoot {
    mainClassName = 'apidemo.Application'
}


// Start application
task startProvider(type: SpawnProcessTask, dependsOn: 'assemble') {
    command "java -jar \u0024{jar.archivePath}"
    ready 'Started MainApplication'
}

// Task to kill the provider process
task stopProvider(type: KillProcessTask) {

}

// Gradle task pactVerify to run the provider side tests
pact {
    serviceProviders {
        'test_provider' {
            port = 8080

            startProviderTask = startProvider
            terminateProviderTask = stopProvider

            hasPactWith('test_consumer') {
                pactFile = file("$buildDir/pacts/test_consumer-test_provider.json")
            }
        }
    }
}
