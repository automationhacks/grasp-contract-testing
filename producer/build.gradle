buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE")
    }
}

plugins {
    id "au.com.dius.pact" version "3.5.19"
    id "com.wiredforcode.spawn" version "0.8.2"
}

import com.wiredforcode.gradle.spawn.*

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'blog.automationhacks.contracttesting'
version '1.0-SNAPSHOT'

bootJar {
    baseName = 'gs-rest-service'
    version =  '0.1.0'
}

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }

    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

springBoot {
    mainClassName = 'hello.Application'
}

task startProvider(type: SpawnProcessTask, dependsOn: 'assemble') {
    command "java -jar ${jar.archivePath}"
    ready 'Started MainApplication'
}

task stopProvider(type: KillProcessTask) {

}

pact {
    serviceProviders {
        'test_provider' {
            port = 8080

            startProviderTask = startProvider
            terminateProviderTask = stopProvider

            hasPactWith('test_consumer') {
                pactFile = file("$buildDir/pacts/test_consumer-test_provider.json")
            }
        }
    }
}